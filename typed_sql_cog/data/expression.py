import cog

cog.outl("# the following are code generated by cog, do not modify")
cog.outl("# fmt:off")

for name, op in [("__add__", "+"), ("__sub__", "-"), ("__mul__", "*")]:
    cog.out(
        f"""

@overload
def {name}(self: Expression[int], other: Expression[int]) -> Expression[int]:
    pass

@overload
def {name}(self: Expression[float], other: Expression[int]) -> Expression[float]:
    pass

@overload
def {name}(self: Expression[int], other: Expression[float]) -> Expression[float]:
    pass

@overload
def {name}(self: Expression[float], other: Expression[float]) -> Expression[float]:
    pass

def {name}(self: Expression, other: Expression) -> Expression:
    def q(ctx: QueryContext) -> QueryStr:
        lhs = self._query(ctx=ctx)
        rhs = other._query(ctx=ctx)
        return QueryStr(f"({{lhs}}) {op} ({{rhs}})")
    return Expression(q=q)
""",
        dedent=True,
        trimblanklines=True,
    )

cog.outl("# fmt:on")
